openapi: 3.0.3
info:
  title: comproblems
  description: |-
    競プロ問題投稿アプリ
  version: 0.0.0
servers:
  - url: https://tqk.trap.show/comproblems
tags:
  - name: user
    description: ユーザーに関する操作
  - name: problems
    description: 問題に関する操作
  - name: judge
    description: ジャッジに関する操作
paths:
  /ping:
    get:
      summary: pong
      operationId: ping
      responses:
        "200":
          description: Ok
          content:
            text/plain:
              schema:
                type: string
                example: pong
  
  /user/signup:
    post:
      tags:
        - user
      summary: ユーザーを登録します
      description: ""
      operationId: signup
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postLoginRequest"
      responses:
        "201":
          description:
            Created
            ユーザーが作成されました
        "400":
          description:
            Bad Request
            ユーザー名やパスワードは空にできません
        "409":
          description:
            Conflict
            ユーザーはすでに存在します
  /user/login:
    post:
      tags:
        - user
      summary: ログインします
      description: ""
      operationId: login
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postLoginRequest"
      responses:
        "200":
          description:
            Ok
            ログインしました
        "403":
          description:
            Forbidden
            ユーザー名かパスワードが違います
  /user/logout:
    delete:
      tags:
        - user
      summary: ログアウトします
      description: ""
      operationId: logout
      parameters: []
      responses:
        "204":
          description:
            No Content
            ログアウトしました
  /user/whoami:
    get:
      tags:
        - user
      summary: ログイン状態を返します
      operationId: whoami
      parameters: []
      responses:
        "200":
          description:
            Ok
            ログインしています
          content:
            application/json:
              schema:
                title: ログイン状態
                type: object
                properties:
                  username:
                    type: string
                    description: ログイン中のユーザーのユーザー名
        "403":
          description: 
            Forbidden
            ログインしていません
  
  /problems:
    get:
      tags:
        - problems
      summary: 問題一覧を返します
      operationId: listProblems
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProblemResponse"
    post:
      tags:
        - problems
      summary: 新しい問題を作成します
      operationId: postProblem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postProblemRequest"
      responses:
        "201":
          description:
            Created
            作成しました
        "400":
          description:
            Bad Request
  /problems/{problemId}:
    get:
      tags:
        - problems
      summary: 問題の内容を返します
      operationId: getProblem
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  author:
                    type: string
                  difficulty:
                    type: integer
                  statement:
                    type: string
    put:
      tags:
        - problems
      summary: 問題の内容を変更します
      operationId: newProblemproblemIdInPath
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/putProblemRequest"
      responses:
        "200":
          description:
            Ok
            変更されました
        "400":
          description:
            Bad request
        "403":
          description:
            Forbidden
            権限がありません
    delete:
      tags:
        - problems
      summary: 問題を削除します
      operationId: deleteProblem
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
      responses:
        "204":
          description: 
            No Content
            消去しました
        "403":
          description:
            Forbidden
            権限がありません
  /problems/{problemId}/testcases:
    get:
      tags:
        - problems
      summary: テストケース一覧を返します
      operationId: getProblemTestcases
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
        "403":
          description:
            Forbidden
            権限がありません
    post:
      tags:
        - problems
      summary: 新しいテストケースを作成します
      operationId: postTestcase
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postTestcaseRequest"
      responses:
        "201":
          description: 
            Created
            作成しました
  /problems/{problemId}/testcases/{testcaseId}:
    get:
      tags:
        - problems
      summary: テストケースの内容を返します
      operationId: getProblemTestcase
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
        - $ref: "#/components/parameters/testcaseIdInPath"
      
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
    put:
      tags:
        - problems
      summary: テストケースの内容を変更します
      operationId: getProblemTestcase
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
        - $ref: "#/components/parameters/testcaseIdInPath"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postTestcaseRequest"
      responses:
        "200":
          description: 
            Ok
            変更しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
        "403":
          description: 
            Forbidden
            権限がありません
    delete:
      tags:
        - problems
      summary: テストケースを削除します
      operationId: getProblemTestcase
      parameters:
        - $ref: "#/components/parameters/problemIdInPath"
        - $ref: "#/components/parameters/testcaseIdInPath"
      responses:
        "204":
          description:
            No Content
            削除しました
        "403":
          description: 
            Forbidden
            権限がありません

  /execute:
    post:
      tags:
        - judge
      summary: 実行します
      operationId: postExecute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postExecuteRequest"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postExecuteResponse"
        "503":
          description: 
            Service Unavailable
            実行上限数を超過しました
                
  /submit:
    post:
      tags:
        - judge
      summary: ジャッジします
      operationId: postSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postSubmitRequest"
      responses:
        "204":
          description: No Content
        "503":
          description: 
            Service Unavailable
            実行上限数を超過しました
  /submittions:
    get:
      tags:
        - judge
      summary: 提出一覧を返します
      operationId: getSubmittions
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getSubmittionsResponse"
  /submittions/{submittionId}:
    get:
      tags:
        - judge
      summary: 提出の内容を返します
      operationId: getSubmittion
      parameters:
        - $ref: "#/components/parameters/submittionIdInPath"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getSubmittionResponse"


            


        

components:
  parameters:
    problemIdInPath:
      name: problemId
      in: path
      description: 問題 id
      required: true
      schema:
        type: integer
    testcaseIdInPath:
      name: testcaseId
      in: path
      description: テストケース id
      required: true
      schema:
        type: integer
    submittionIdInPath:
      name: submittionId
      in: path
      description: 提出 id
      required: true
      schema:
        type: integer
  schemas:
    postLoginRequest:
      type: object
      properties:
        username: 
          type: string
          example: tqk
        password:
          type: string
          example: password
      required:
        - username
        - password
    getProblemResponse:
      type: object
      properties:
        problems:
          type: array
          items:
            type: object
            properties:
              problemId:
                type: integer
              title:
                type: string
              author:
                type: string
              difficulty:
                type: integer
    postProblemRequest:
      type: object
      properties:
        title:
          type: string
          example: "A+B"
        difficulty:
          type: integer
          example: 1
        statement:
          type: string
          example: "# 問題文\n\n$A+B$ を出力してください。\n..."
      required:
        - title
        - difficulty
        - statement
    postTestcaseRequest:
      type: object
      properties:
        filename:
          type: string
          example: 0_sample_01.in
        content:
          type: string
          example: "6 7"
    putProblemRequest:
      type: object
      properties:
        title:
          type: string
          example: "A+B"
        difficulty:
          type: integer
          example: 1
        statement:
          type: string
          example: "# 問題文\n\n$A+B$ を出力してください。\n..."
      required:
        - problemId
        - title
        - difficulty
        - statement
    postExecuteRequest:
      type: object
      properties:
        language:
          type: string
          example: "python3"
        source:
          type: string
          example: "A, B = map(int, input().split())\nprint(A+B)"
        input:
          type: string
          example: "6 7"
    postExecuteResponse:
      type: object
      properties:
        output:
          type: string
          example: "11"
    postSubmitRequest:
      type: object
      properties:
        problemId:
          type: string
          example: 1
        language:
          type: string
          example: "python3"
        source:
          type: string
          example: "A, B = map(int, input().split())\nprint(A+B)"
    getSubmittionsResponse:
      type: object
      properties:
        submittions:
          type: array
          items:
            type: object
            properties:
              submittionId:
                type: integer
                example: 100
              problemId:
                type: integer
                example: 1
              author:
                type: string
                example: tqk
              result:
                type: string
                example: "1/5"
    getSubmittionResponse:
      type: object
      properties:
        author:
          type: string
          example: tqk
        problemId:
          type: integer
          example: 1
        language:
          type: string
          example: "python3"
        source:
          type: string
          example: "A, B = map(int, input().split())\nprint(A+B)"
        result:
          type: string
          example: "AC"
        
          
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
